// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pkg/session/session.proto

package session

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionManagementClient is the client API for SessionManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionManagementClient interface {
	GetSessionInfo(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Temp, error)
	SetSession(ctx context.Context, in *SessionData, opts ...grpc.CallOption) (*None, error)
}

type sessionManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionManagementClient(cc grpc.ClientConnInterface) SessionManagementClient {
	return &sessionManagementClient{cc}
}

func (c *sessionManagementClient) GetSessionInfo(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Temp, error) {
	out := new(Temp)
	err := c.cc.Invoke(ctx, "/session.SessionManagement/GetSessionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagementClient) SetSession(ctx context.Context, in *SessionData, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := c.cc.Invoke(ctx, "/session.SessionManagement/SetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionManagementServer is the server API for SessionManagement service.
// All implementations must embed UnimplementedSessionManagementServer
// for forward compatibility
type SessionManagementServer interface {
	GetSessionInfo(context.Context, *SessionID) (*Temp, error)
	SetSession(context.Context, *SessionData) (*None, error)
	mustEmbedUnimplementedSessionManagementServer()
}

// UnimplementedSessionManagementServer must be embedded to have forward compatible implementations.
type UnimplementedSessionManagementServer struct {
}

func (UnimplementedSessionManagementServer) GetSessionInfo(context.Context, *SessionID) (*Temp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionInfo not implemented")
}
func (UnimplementedSessionManagementServer) SetSession(context.Context, *SessionData) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSession not implemented")
}
func (UnimplementedSessionManagementServer) mustEmbedUnimplementedSessionManagementServer() {}

// UnsafeSessionManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionManagementServer will
// result in compilation errors.
type UnsafeSessionManagementServer interface {
	mustEmbedUnimplementedSessionManagementServer()
}

func RegisterSessionManagementServer(s grpc.ServiceRegistrar, srv SessionManagementServer) {
	s.RegisterService(&SessionManagement_ServiceDesc, srv)
}

func _SessionManagement_GetSessionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServer).GetSessionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.SessionManagement/GetSessionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServer).GetSessionInfo(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManagement_SetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServer).SetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.SessionManagement/SetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServer).SetSession(ctx, req.(*SessionData))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionManagement_ServiceDesc is the grpc.ServiceDesc for SessionManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.SessionManagement",
	HandlerType: (*SessionManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessionInfo",
			Handler:    _SessionManagement_GetSessionInfo_Handler,
		},
		{
			MethodName: "SetSession",
			Handler:    _SessionManagement_SetSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/session/session.proto",
}
